#App {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  text-align: center;
}

.calculator {
  width: 300px; /* Or any desired width */
  border: 1px solid #ccc;
  border-radius: 5px;
  /* Add other calculator container styles as needed */
}

.display {
  color: #000;
  background-color: #f0f0f0;
  padding: 10px;
  text-align: right;
  font-size: 1.5em;
  min-height: 1.5em; /* Ensure a minimum height */
  border-bottom: 1px solid #ccc;
}

.buttons {
  display: grid;
  grid-template-columns: repeat(4, 1fr); /* Creates 4 equal columns */
  gap: 1px; /* Gap between buttons */
  background-color: #ccc; /* Background for the grid gaps */
  border-top: 1px solid #ccc; /* Separator from display */
}

.button {
  background-color: #fff;
  border: none;
  padding: 15px;
  font-size: 1.1em;
  text-align: center;
  cursor: pointer;
  outline: none; /* Remove default focus outline */
}

.button:hover {
  background-color: #f0f0f0;
}

.button:active {
  background-color: #ddd;
}

/* Specific styles for different button types */
.button-number {
  background-color: #e0e0e0; /* Light grey for numbers */
}

.button-number:hover {
  background-color: #d0d0d0;
}

.button-operator {
  background-color: #ff9800; /* Orange for operators */
  color: white;
}

.button-operator:hover {
  background-color: #e68a00;
}

.button-control {
  background-color: #d32f2f; /* Red for C (clear) */
  color: white;
}

.button-control:hover {
  background-color: #c02a2a;
}

.button-symbol {
  background-color: #607d8b; /* Blue-grey for symbols like π, (, ) */
  color: white;
}

.button-symbol:hover {
  background-color: #546e7a;
}

/* Example for a button that could span more columns, e.g., '0' or '=' or special functions.
   This would require adjusting the grid-column property in JS or here if fixed.
   For now, all buttons are 1fr.
   If 'x²', '√', 'π' are on their own row and we want them to be wider:
   Assume they are the last items. We can target them with nth-last-child if needed,
   or give them a specific class in JS for spanning.
   For simplicity, keeping all buttons same width for now.
   The last row with 3 items will just leave the 4th column empty with current grid setup.
   To make them span:
   .button[value="x²"] { grid-column: span 1; } // or specific class
   .button[value="√"] { grid-column: span 1; }
   .button[value="π"] { grid-column: span 2; } // if we want pi to be wider
*/

/* Styling for the last row buttons to be distributed if not a full row */
/* This is a bit tricky with current flat map. For a more complex layout,
   consider rendering row by row or using more specific grid placement.
   The current buttonLayout.flat() simplifies rendering but makes complex grid less direct.
   For now, they will just fill the grid cells sequentially.
   The last three items 'x²', '√', 'π' will occupy the first 3 cells of the last implicit row.
*/
